name: .NET Core WinForms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: Stalker.sln  # Your solution name
      Project_Path: Stalker.csproj  # Your WinForms project file path

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install MSIX Packaging Tool
      run: |
        # Download the installer
        Invoke-WebRequest -Uri https://aka.ms/msix-packaging-tool-installer -OutFile msixpackagingtool.exe
        # Check if the file was downloaded successfully
        if (Test-Path -Path msixpackagingtool.exe) {
          Write-Host "MSIX Packaging Tool installer downloaded successfully."
          # Install the tool
          Start-Process -FilePath msixpackagingtool.exe -ArgumentList "/quiet", "/install" -Wait
        } else {
          Write-Error "Failed to download the MSIX Packaging Tool installer."
          exit 1
        }
        # Clean up installer file
        Remove-Item -Force msixpackagingtool.exe

    # Restore dependencies
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the application (not using WAP, just the WinForms app)
    - name: Build the application
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:OutputPath=./bin/$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Publish the application to a folder
    - name: Publish the application
      run: |
        dotnet publish $env:Project_Path -c ${{ matrix.configuration }} -o ./published
      env:
        Configuration: ${{ matrix.configuration }}

    # Create MSIX package from published files using MSIX Packaging Tool
    - name: Create MSIX package
      run: |
        New-AppxPackage -PackagePath './AppPackages' -PackageName 'MyApp.msix' -InputPath './published' -AppUserModelId 'MyApp' -Publisher 'CN=MyPublisher' -Version '1.0.0.0'

    # List the files in AppPackages to verify MSIX package exists
    - name: List files in AppPackages
      run: |
        ls ./AppPackages

    # Create a tag for the release
    - name: Create tag
      run: |
        echo "Creating tag: ${{ secrets.VERSION }}"
        git tag ${{ secrets.VERSION }}
        git push origin ${{ secrets.VERSION }}

    # Upload MSIX package to GitHub Release
    - name: Upload MSIX package to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ secrets.VERSION }}
        files: ./AppPackages/*.msix
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
